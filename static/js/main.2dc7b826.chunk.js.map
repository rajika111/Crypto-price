{"version":3,"sources":["component/Cryptocurrency.js","component/Tickers.js","component/Comments1.js","App.js","serviceWorker.js","index.js"],"names":["Cryptocurrency","keepwatch","console","log","className","this","props","name","rate","onClick","Component","Tickers","state","data","id","symbol","price_usd","percent_change_1h","percent_change_24h","percent_change_7days","axios","url","method","headers","then","response","wanted","result","filter","currency","includes","setState","catch","err","fetchCryptocurrencyData","interval","setInterval","values","Object","cur","keys","i","length","push","USD","tickers","map","key","Comments1","handleChange","e","preventDefault","target","value","handlClik","addItem","comment","type","placeholder","onChange","App","addNewComment","temp","list","remove","com","index","indexOf","splice","addNewitem","get","res","ree","commentToDisplay","item","newItem","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2dc7b826.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Cryptocurrency.css';\n\nclass Cryptocurrency extends Component {\n\n    keepwatch= () => {console.log(\"string\")}\n\n\n    render () {\n       \n        return (\n           <div>\n               <li className={\"cryptocurrency \"}>\n\n          <p className=\"cryptocurrencylist\">{this.props.name}  </p>\n\n                <h1>${this.props.rate}</h1>\n                \n\n            </li>\n            <div onClick={this.keepwatch} >keep watch</div>\n            </div> \n        )   \n    }  \n}\n\nexport default Cryptocurrency;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React,{Component} from 'react';\n\n// class Cryptocurrency extends Component{\n//     render(){\n//         const cryptocurrency1 = {\n//             id,\n//             name,\n//             symbol,\n//             price_usd,\n//             percent_change_1h,\n//             percent_change_24h,\n//             percent_change_7d,\n//         } = this.props.data;\n//         return(\n//             <li className={\"cryptocurrency\"+id}>\n//                 <p className=\"cryptocurrency-name\">{name}{{symbol}}</p>\n//                 <h1>${(+price_usd).toFixed(2)}</h1>\n//                 <p>{percent_change_1h}% 1h</p>\n//                 <p>{percent_change_24h}% 24h</p>\n//                 <p>{percent_change_7d}% 7days</p>\n//             </li>\n//            )\n//         }\n//     }\n// export default Cryptocurrency;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Cryptocurrency from './Cryptocurrency';\nimport './Tickers.css';\n\nclass Tickers extends Component {\n \n\n    fetchCryptocurrencyData() {\n        axios   ({\n            url: \"http://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?slug=bitcoin,ethereum,litecoin,bitcoin-cash,ripple,eos,binance-coin,tron,cardano,monero\",\n            method: \"GET\",\n            headers:{\n                'X-CMC_PRO_API_KEY': '4272dd3f-7910-4d34-8bcf-5eebcaec8ae2',\n                \"Accept\": \"application/json\",\n               'Accept-Encoding': 'deflate, gzip'\n            }\n\n        })\n            .then(response => {\n                console.log('---;---;----',response);\n                const wanted = [\"bitcoin\", \"ethereum\", \"litecoin\"];\n                const result = response.data.filter(currency => wanted.includes(currency.id));\n                this.setState({data: result});\n            })\n            .catch(err => console.log(\"hekikihekiehke\",err));\n    }\n\n    componentDidMount() {\n        this.fetchCryptocurrencyData();\n        this.interval = setInterval(() => this.fetchCryptocurrencyData(), 60*60* 1000);\n    }\n\n    state = {\n        data: [\n            {\n                id: \"bitcoin\",\n                name: \"Bitcoin\",\n                symbol: \"BTC\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n            {\n                id: \"ethereum\",\n                name: \"Ethereum\",\n                symbol: \"ETH\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n            {\n                id: \"litecoin\",\n                name: \"Litecoin\",\n                symbol: \"LTC\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n\n            {\n                id: \"BitcoinCash\",\n                name: \"BitcoinCash\",\n                symbol: \"BCH\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n\n            {\n                id: \"ripple\",\n                name: \"ripple\",\n                symbol: \"XRP\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n            {\n                id: \"EOS\",\n                name: \"EOS\",\n                symbol: \"EOS\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n            {\n                id: \"binance-coin\",\n                name: \"Binance-coin\",\n                symbol: \"BNB\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n            {\n                id: \"TRON\",\n                name: \"TRON\",\n                symbol: \"TRX\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n            {\n                id: \"Cardano\",\n                name: \"ADA\",\n                symbol: \"ADA\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n            {\n                id: \"Monero\",\n                name: \"Monero\",\n                symbol: \"XMR\",\n                price_usd: \"1\",\n                percent_change_1h: \"0\",\n                percent_change_24h: \"0\",\n                percent_change_7days: \"0\",\n            },\n        ]\n    }\n\n    render () {\n           let values = Object.values(this.props.cur)\n            let keys = Object.keys(this.props.cur)\n            let data = [];\n        //    console.log(values);\n        //    console.log(keys);\n            for (let i = 0; i < keys.length; i++) {\n                data.push({name: keys[i], rate: values[i].USD})\n                \n            }\n            console.log(data)\n           \n            const tickers = data.map((currency, i) => \n\n           <Cryptocurrency key={i} name={currency.name} rate={currency.rate} />\n        );\n\n              return(\n         <div className=\"tickers-container\">\n                <ul className=\"tickers\"> {tickers} </ul>\n                <p>price udpated every 10 seconds</p>\n            </div>\n        );\n    }\n}\n\nexport default Tickers;  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React,{Component} from 'react';\n// import axios from 'axios';\n// import Cryptocurrency from './Cryptocurrency';\n// import './Tickers.css';\n\n// //import cryptocurrency component\n\n// class Tickers extends Component{\n//     fetchCryptocurrency(){\n//         axios.get(\"https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest\")\n//         .then(response=> {\n\n//                var wanted =[\"bitcoin\",\"ethereum\",\"litecoin\"];\n\n//                  var result = response.data.filter(currency => wanted.includes(currency.id));\n//             this.setState({data: result});\n        \n//         })\n\n//     }\n//      componentDidMoundt(){\n\n//     this.fetchCryptocurrencyData();\n//     this.interval =setInterval(()=> this.fetchCryptocurrencyData(),1*1000);\n\n//     }\n//     state = {\n//         data:[\n//             {\n//                 id: \"bitcoin\",\n//                 name:\"Bitcoin\",\n//                 symbol:\"BTC\",\n//                 price_usd:\"1\",\n//                 percent_change_1hr:\"0\",\n//                 percent_change_24hr:\"0\",\n//                 percent_change_7d:\"0\",\n//             },\n//             {\n//                 id: \"ethereum\",\n//                 name:\"Ethereum\",\n//                 symbol:\"ETH\",\n//                 price_usd:\"1\",\n//                 percent_change_1hr:\"0\",\n//                 percent_change_24hr:\"0\",\n//                 percent_change_7d:\"0\",\n//             },\n//             {\n//                 id: \"litecoin\",\n//                 name:\"Litecoin\",\n//                 symbol:\"LTC\",\n//                 price_usd:\"1\",\n//                 percent_change_1hr:\"0\",\n//                 percent_change_24hr:\"0\",\n//                 percent_change_7d:\"0\",\n//             },\n//         ] \n//     }\n//     render(){\n//           const tickers = this.state.data.map((currency) => {\n          \n//           return (<Cryptocurrency data={currency} key={currency.id}/>)\n//         })\n//     }\n\n//         return(){\n\n//             <div className=\"tickers-containers\">\n//                 <ul className=\"tickers\">{tickers}</ul>\n//                     <p>Information takes 10sc to fetch</p>\n                \n//             </div>\n\n//         }\n        \n        \n// }\n\n//     export default Tickers;","import React, { Component } from 'react';\n\n\n\nclass Comments1 extends Component {\n\n  constructor(props){\n    super(props);\n    this.state ={\n      name:\"\",\n      comment:\"\"\n    }\n  }\n\n  handleChange=(e)=>{\n    \n    e.preventDefault();\n\n    this.setState({\n     [e.target.name]:e.target.value,\n    });\n  }\n\n  handlClik=(e)=>{\n    // this.props.newItem(this.state)\n    e.preventDefault();\n    this.props.addItem(this.state.name,this.state.comment)\n  }\n\nrender (){\n    return (\n    \n  <div>\n    <form >\n    <input type=\"text\" name=\"name\" placeholder=\"name\" onChange = {this.handleChange} value={this.state.name}>\n    </input>\n    <input type=\"text\" name=\"comment\" placeholder=\"your commnts\" onChange = {this.handleChange} value={this.state.comment}>\n    </input>\n    <input type=\"submit\" value=\"post\" onClick={this.handlClik} />\n  </form>\n  </div>\n    )\n    \n}}\n\n\n  export default Comments1;","\nimport React, { Component } from 'react';\nimport Tickers from './component/Tickers';\nimport './App.css';\nimport axios from 'axios'\nimport Comments1 from './component/Comments1';\n\n\nclass App extends Component {\n\n\n  constructor(props){\n    super(props);\n    this.state={\n        list:[{name:\"\",comment:\"\"}],\n        cur: {},\n        list: []\n    }\n  }\n\naddNewComment= (name,comment) => { \n\n  const temp={name:name,comment:comment};\n  console.log(temp)\n  this.setState({\n\n    list: [...this.state.list,temp]\n  }\n  )\n  console.log(this.state.list);\n\n  console.log('ggg', [...this.state.list,temp]);\n  \n\n}\n\nremove = (comment) => {\n  let com = [this.state.list]\n let index = com.indexOf(comment)\n\n com.splice(index, 1)\n this.setState({\n   list: com\n })\n}\n\naddNewitem=(e)=>{\n    console.log(e)\n      // this.setState({\n      //   list:[data,...this.state.list]\n      // })\n  }\n  componentDidMount(){\n    axios.get(\"https://min-api.cryptocompare.com/data/pricemulti?fsyms=BTC,ETH,LTC,BCH,XRP,EOS,BNB,TRX,ADA,XMR&tsyms=USD\")\n    .then(res=> {\n      console.log(res.data) \n      this.setState({\n        cur: res.data\n      })\n    })\n    .catch(ree => console.log(ree) )\n\n\n  //   fetch('https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?slug=bitcoin,ethereum,litecoin,bitcoin-cash')\n  // .then(response => response.json())\n  // .then(commits => console.log(commits))\n  \n  }\n\n    \n    \n    \n    // console.log (item.name); console.log (item.comment\n    render (){\n\n\n    const commentToDisplay = this.state.list.map((item,index) =>{\n        \n      return( <div>\n        <h2>\n          {item.name}\n        </h2> \n        <p>\n          {item.comment}\n        </p>\n        <button onClick={()=>this.remove(item)}> remove comment</button>\n      </div>)\n      });\n\n    return (\n      <div className=\"App\">\n        <div className=\"header\">\n\n          <h2>Cryptocurrency</h2>\n            <p>The place to track your favorite cryptocurrency </p>\n\n            <Tickers cur={this.state.cur} />\n            <Comments1 remove={this.remove} newItem={this.addNewitem}\n            addItem = {this.addNewComment}/>\n           {commentToDisplay}\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// import React, {Component} from 'react';\n// import Tickers from './component/Tickers';\n// import './App.css';\n\n// class App extends Component {\n//   render() {\n//     return (\n//     <div className=\"App\">\n//       <div className=\"App-header\">\n//        <h2>Crypto-Price</h2>\n//       </div>\n//       <Tickers/>\n//     </div>\n//   );\n//   }\n// }\n\n// export default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}